stages:
  - lint
  - test
  - build
  - deploy

variables:
  NODE_IMAGE: node:18-alpine
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/

lint-frontend:
  stage: lint
  image: $NODE_IMAGE
  script:
    - cd frontend
    - npm install
    - npm run lint:report || true
  artifacts:
    reports:
      codequality: frontend/gl-code-quality-report.json
    expire_in: 1 week
  only:
    changes:
      - frontend/**/*

test-frontend:
  stage: test
  image: $NODE_IMAGE
  script:
    - cd frontend
    - npm install
    - npm run test:unit
  artifacts:
    paths:
      - frontend/coverage/
    reports:
      junit: frontend/test-results/junit.xml
    expire_in: 1 week
  only:
    changes:
      - frontend/**/*

build-frontend-image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd frontend
    - docker build --target production -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - main
    - develop
    - tags

deploy-frontend-dev:
  stage: deploy
  image: alpine:3.14
  before_script:
    - apk add --no-cache curl
  script:
    - curl -X POST $WEBHOOK_DEV_URL -H "Content-Type: application/json" -d '{"service":"frontend","version":"'$CI_COMMIT_REF_SLUG'"}'
  environment:
    name: development
  only:
    - develop

deploy-frontend-prod:
  stage: deploy
  image: alpine:3.14
  before_script:
    - apk add --no-cache curl
  script:
    - curl -X POST $WEBHOOK_PROD_URL -H "Content-Type: application/json" -d '{"service":"frontend","version":"'$CI_COMMIT_REF_SLUG'"}'
  environment:
    name: production
  only:
    - main
    - tags
  when: manual